#+TITLE: Program Write Up

* Testing


** Manual Testing

The tests are designed defensively and with code coverage in mind.

Manual UI testing was also done, since this is difficult to automate. To that
end I have created a table of all the sorts of things the user might type in,
and how my program should handle that.

Because all of the internals to the engine are already tested and working as
expected, so the manual test set is small since it only needs to cover the
actual user interactions with the interface.

| Input                      | Expected Output                                                                                                                    |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| "test"                     | No spelling mistakes should be reported, since tokens like "',. should be ignore if found at the start or end of a word.           |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| "test     "                | Again no spelling mistakes should be reported, empty strings like '' should be ignored since they aren't real words.               |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| 123457                     | No spelling mistakes should be reported, since numbers aren't misspelt.                                                            |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| haallo                     | This should be caught as a single spelling error. At the same time I test the carousal control to make sure it                     |
|                            | stays on the single misspelled word and doesn't crash because there is only one word to cycle through.                             |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| haillo huullo helo         | Three spelling errors should be reported. I should be able to cycle through all of them (next and previous buttons), in a circular |
|                            | fashion, and the highlighting on the misspelled words should match the corrections being shown.                                    |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| this is a tset, good daee. | "tset" and "dae" should be reported as mistakes, ignoring the "," and "." in each word.                                            |

An example of these tests running:
[[file:img-2017-09-03-152810.png]]

** Automated testing

Each individual test, along with inputs and expected outputs can be found in
their respective test files in the tests directly. Because these tests are code
you can run them as you wish, using =pytest=, the modern test framework for
python.

The most important areas to test was the cyclical list, the classifier, the
database interface and the serializer interface.

The cyclical list (which is a [[https://en.wikipedia.org/wiki/Doubly_linked_list][Doubly Linked Circular List]]) testing is very
thorough, testing every method and includes edge cases. Deletion if multiple
elements in the list exist as well as deletion if single elements or even no
elements in the list exist are all tested there. Building the list in multiple
different ways is also tested, to ensure the insertion is versatile. I also
ensure that every link in a complex series of links after insertion is pointing
at the right elements and that the length is tracked properly.

Cyclical List test are found in =test_utilities.py=

The classifier is also thoroughly tested in many regards, including for cases
that aren't likely to exist, such as an unidentifiable property being passed for
classification.

These tests are found in =test_classifier.py=.

Here is the output of the tests I ran:


(Please note the "16" tests passed is inaccurate, there are many more assert
statements, it only counts each individual function).

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.6.2, pytest-3.2.1, py-1.4.34, pluggy-0.4.0
rootdir: /media/jake/Files/repos/py/speller, inifile:
plugins: cov-2.5.1, aiohttp-json-rpc-0.8.1
collected 16 items

test/test_classifier.py ......
test/test_frequency.py .
test/test_serializer.py ..
test/test_utilities.py ..
test/test_words.py .....

========================== 16 passed in 1.65 seconds ===========================
#+END_EXAMPLE

Furthermore I also have coverage reports, which show that for every file the
coverage was at 100%. This means that every class, for loop, if statement and
line is hit at some point in the testing procedure, even the ones there for
debug.

Here is the output for the =db= module:

#+BEGIN_EXAMPLE
----------- coverage: platform linux, python 3.6.2-final-0 -----------
Name               Stmts   Miss  Cover   Missing
------------------------------------------------
db/serializer.py      13      0   100%
db/words.py           20      0   100%
------------------------------------------------
TOTAL                 33      0   100%


========================== 16 passed in 1.81 seconds ===========================
#+END_EXAMPLE

Here is the output for the engine module:

#+BEGIN_EXAMPLE
----------- coverage: platform linux, python 3.6.2-final-0 -----------
Name                   Stmts   Miss  Cover   Missing
----------------------------------------------------
engine/__init__.py         0      0   100%
engine/classifier.py      76      0   100%
engine/frequency.py        3      0   100%
engine/utilities.py       69      0   100%
----------------------------------------------------
TOTAL                    148      0   100%


========================== 16 passed in 1.79 seconds ===========================
#+END_EXAMPLE


* Planning

There was a fair bit of planning that went into the design and development of my
program.


** Initial

My initial planning was done on paper, and documented how I thought the UI could
be presented, as well as a simple flowchart of the program overall. Because I
was also designing a database schema to hold data as well, I also designed that
at the same time.

*** GUI

[[file:planning/20170903_153350.jpg]]
*** Database
The database started out way more complex than I ultimately needed it to be, so
it changed to reflect that in the final program.
[[file:planning/20170904_173515.jpg]]
[[file:planning/20170904_172856.jpg]]
*** Program
[[file:planning/20170904_172909.jpg]]
** Final
For my final version of development I vastly simplified a lot of the developed
product through optimizations and stakeholder revision. Notably my database is a
lot smaller now and my code is a little simpler.

*** GUI

My GUI didn't change all that much over the course of development, it became a
little simpler as I aimed to remove buttons and instead adopt a DWIM (Do What I
Mean, not what I tell you) approach. This meant that the program had to infer a
little more about what the user was trying to do rather than have them say it
outright to them, but was definitely worth the effort from a UX perspective.

[[file:planning/20170903_154450.jpg]]
*** Database
[[file:planning/20170904_174717.jpg]]
*** Program

See the programmingplan.dia file for the general structure of the core portions
of the program. Not included here is miscellaneous database stuff that isn't
particularly interesting or needed to understand how it works.

** Object Tables
*** engine
**** classifier.py
A naive bayesian classifier implementation that provides a general purpose,
yet flexible method of classifying objects into classes.

| Name                 | Type                | Documentation                                                                             |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| Type                 | Class               | Represents the various probabilities associated with a classification                     |
|                      |                     | of objects. For instance it may hold the classification of the 'banana',                  |
|                      |                     | and in which case it would have the probability of any random thing being a               |
|                      |                     | banana as well as the probability of bananas being yellow, sweet or long.                 |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| cls                  | Field < Type        | The name of the type, e.g 'Banana'.                                                       |
| class_probability    | Field < Type        | The probability of any given object being that type                                       |
| property_probability | Field < Type        | A map of properties (e.g 'long', 'yellow') to probabilities.                              |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| train                | Method < Type       | Given a set of points known to be of the type described by the object,                    |
|                      |                     | Sum and calculate the probabilities of these properties occurring in any                  |
|                      |                     | random instance of that type.                                                             |
| summarize            | Method < Type       | Return the class probability and property probability map (debug only)                    |
| probability          | Method < Type       | Given a list of properties held by some unknown object, return the probability            |
|                      |                     | the object belong to the type.                                                            |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| Classifier           | Class               | General purpose bayesian classifier. Given a set of properties (e.g                       |
|                      |                     | long, sweet, yellow) the classifier can return what the object referred to                |
|                      |                     | is likely to be given those properties (e.g banana).                                      |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| classes              | Field < Classifier  | A list of types (or classes, I named the class object Type because python reserves        |
|                      |                     | the 'Class' keyword), that the classifier knows about (e.g 'Banana', 'Apple', 'Orange')   |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| train                | Method < Classifier | Given a list of properties and their associated types, train the classifier to recognize  |
|                      |                     | them.                                                                                     |
| classify             | Method < Classifier | Given a set of properties with an unknown type, use the bayesian probability to infer     |
|                      |                     | what the unknown type is likely to be.                                                    |
|----------------------+---------------------+-------------------------------------------------------------------------------------------|
| group_by_class       | Function            | Take a list in the form [[type, prop1, prop2, ... propn] ... typen] and convert it into a |
|                      |                     | mapping of types to properties, {type: [[prop1, prop2, prop3, ... propn] ...] ...}        |

**** frequency.py
Calculate the probability of encountering a word w, given that it is within
the top 1000 most common words. P(r) is given by 0.1/r, where 1 < r < 1000.
1000 words is the limit as beyond that the harmonic series diverges for less
frequent words. About 50% of all words in the Oxford English Corpus reside in
the top 100 words.

| Name         | Type     | Documentation                        |
|--------------+----------+--------------------------------------|
| frequency_of | Function | Rank a word according to zipf's law. |
|              |          | >>> frequency_of(1)                  |
|              |          | 0.1                                  |
|              |          | >>> frequency_of(3)                  |
|              |          | 0.1 / 3                              |

**** utilities.py
| Name        | Type                | Documentation                                  |
|-------------+---------------------+------------------------------------------------|
| Node        | Class               | Node in circular doubly linked list.           |
|             |                     | Holds a next pointer and previous pointer.     |
|-------------+---------------------+------------------------------------------------|
| next_node   | Field < Node        | Holds pointer to next node.                    |
| prev_node   | Field < Node        | Holds pointer to previous node.                |
| value       | Field < Node        | Holds the value of the node.                   |
|-------------+---------------------+------------------------------------------------|
| insert      | Method < Node       | Insert a node after this node.                 |
|             |                     | Visual for inserting node b.                   |
|             |                     | <- a -> <- c ->                                |
|             |                     | <- a -> b <- c ->                              |
|             |                     | next's previous should point to new node.      |
|             |                     | previous's next should point to new node.      |
|-------------+---------------------+------------------------------------------------|
| CyclicList  | Class               | CyclicList is a circular, doubly linked list   |
|-------------+---------------------+------------------------------------------------|
| head        | Field < CyclicList  | Holds pointer to head of list.                 |
| tail        | Field < CyclicList  | Holds pointer to end of list.                  |
| length      | Field < CyclicList  | Keeps track of the length of the list.         |
|-------------+---------------------+------------------------------------------------|
| queue_back  | Method < CyclicList | Queue element at the end of the cyclic list.   |
| queue_front | Method < CyclicList | Queue element at the front of the cyclic list. |
| clear       | Method < CyclicList | Remove all elements from CyclicList.           |
| delete      | Method < CyclicList | Delete element from CyclicList.                |
| search      | Method < CyclicList | Search for node in CyclicList.                 |

*** db
**** words.py
An interface for the words stored in the database.
| Name            | Type     | Documentation                         |
|-----------------+----------+---------------------------------------|
| get_id_for_word | Function | Get the id of a word, given the word. |
| get_word_for_id | Function | Get word for given id.                |
| word_exists     | Function | Returns true if words is in database. |
| get_word_list   | Function | Return a list of all words.           |
| append_word     | Function | Append a word to the database.        |
**** serializer.py
Serialize objects into SQLITE database calls.

See =serializer.py= for some usage examples of deserialize_from and insert_into,
as they are intended to be used like abstract methods.

| Name             | Type                  | Documentation                                                               |
|------------------+-----------------------+-----------------------------------------------------------------------------|
| Serializable     | Class                 | Serializable class that implements methods for objects wishing to           |
|                  |                       | serialize to SQLITE tables. This is done with a serialize table that maps   |
|                  |                       | property names to SQLITE table columns. When insert_into is called it takes |
|                  |                       | the properties listed in serialize table and the corresponding table column |
|                  |                       | names, building an SQLITE query to use on the database.                     |
|------------------+-----------------------+-----------------------------------------------------------------------------|
| serialize_table  | Field < Serializable  | Maps strings to object properties                                         |
|------------------+-----------------------+-----------------------------------------------------------------------------|
| deserialize_from | Method < Serializable | Deserialize object from the result of an sqlite SELECT call.                |
| insert_into      | Method < Serializable | Serialize object into a sqlite INSERT call.                                 |
*** ui
Note that correction_dialog.py and speller.py are both auto generated by Qt
designer, which was what I used for creating the user interfaces in without
having to write the UI boilerplate code. As a result I don't document them here.

**** manager.py

| Name                      | Type                 | Documentation                                                                    |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| properties_of             | Function             | Map a word to a list of True/False points that describe it's properties.         |
| correct_word_according_to | Function             | Take a given word, and feed it into the classifier, returning a list of          |
|                           |                      | words that are likely correct.                                                   |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| Correcter                 | Class                | An object that holds the state of word corrections for the UI.                   |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| correcting_words          | Field < Correcter    | A list of words currently identified as misspelled.                              |
| cached_corrections        | Field < Correcter    | A list of words it's already encountered, and past corrections for those         |
|                           |                      | words.                                                                           |
| dictionary                | Field < Correcter    | A set of words the correcter knows about.                                        |
| cur_node                  | Field < Correcter    | A pointer to the word currently being corrected.                                 |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| update                    | Method < Correcter   | Update the list of incorrect words.                                              |
| next                      | Method < Correcter   | Return corrections for the next unrecognized word.                               |
| prev                      | Method < Correcter   | Return corrections for the previous unrecognized word.                           |
| empty                     | Property < Correcter | Is True if there are no words to correct.                                        |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| UIManager                 | Class                | Container class used for managing UI actions and responding to them,             |
|                           |                      | controls main UI window.                                                         |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| application               | Field < UIManager    | The QApplication object Qt demands for managing application resources.           |
| main_window               | Field < UIManager    | The main window object.                                                          |
| main_window_state         | Field < UIManager    | The state of the main window object.                                             |
| conn                      | Field < UIManager    | Connection to the database.                                                      |
| dictionary                | Field < UIManager    | Dictionary of words the UIManager knows about.                                   |
| correcter                 | Field < UIManager    | An instance of the correcter class for correcting misspelled words.              |
| correction_model          | Field < UIManager    | The model used to populate the corrections list.                                 |
|---------------------------+----------------------+----------------------------------------------------------------------------------|
| get_editor_words          | Method < Correcter   | Return a list of the words in the text (just a simple text string                |
|                           |                      | split by a space).                                                               |
| get_unrecognized_words    | Method < Correcter   | Filter a list of words into unrecognized words.                                  |
| get_words                 | Method < Correcter   | Retrieve a list of words from the words database.                                |
| replace_word              | Method < Correcter   | Replace a word within the textedit with the chosen correction.                   |
| get_text_cursor           | Method < Correcter   | Return the current cursor position inside the text editor.                       |
| display_corrections       | Method < Correcter   | Display a word with it's corrections in the spelling sidebar.                    |
| next_word                 | Method < Correcter   | Take the next unrecognized word and display it.                                  |
| prev_word                 | Method < Correcter   | Take the previous unrecognized word and display it.                              |
| update_mistakes           | Method < Correcter   | Scan the document for new errors. Update correcter to recognize these new words. |
| connect_slots             | Method < Correcter   | Connect UI slots for various ui objects.                                         |
| load_classifier           | Method < Correcter   | Load the classifier from the database.                                           |
| run                       | Method < Correcter   | Run UIManager instance, and start the GUI.                                       |
* Versioning

Versioning in my program was done chiefly through the use of the =git= version
control tool. Because I was also following the extreme programming for one
methodology, my "versions" are little more than incremental changes I made,
always trying to achieve a minimum viable product for each git commit. As such,
perhaps the best log of my changes and version is found in the git log of this
repository, accessible via the =git log= command, or in the screenshot I have
included below.

[[file:img-2017-09-03-155251.png]]

The version plan was sort of worked around the project management of the
outcome, rather than the outcome itself. It sort of based itself on the
principles of doing what needed to be done to have it do the basic stuff like
corrections, and then dropping in the other things that were either easy or
extraneous to add.

| Version | Plan                                                                                      |
|---------+-------------------------------------------------------------------------------------------|
|       1 | Get core attributes of the engine completed, including bayesian                           |
|         | classifier, levenshtein distance, frequency analysis and database                         |
|         | interface.                                                                                |
|---------+-------------------------------------------------------------------------------------------|
|       2 | Start work on UI and persistence, i.e mockup and create ui code,                          |
|         | as well as ensuring that user modified state can be written                               |
|         | to the database.                                                                          |
|---------+-------------------------------------------------------------------------------------------|
|       3 | Create an initial classifier to serve as the basis for spell checking.                    |
|         | This involved collecting a lot of spelling data from stakeholders and using               |
|         | some other python scripts (not included here) to massage this data into something usable  |
|---------+-------------------------------------------------------------------------------------------|
|       4 | Clean up cruft from previous 3 iterations, connect various UI components to corresponding |
|         | backend actions.                                                                          |
|---------+-------------------------------------------------------------------------------------------|
|       5 | Add any missing tests to ensure maximal coverage.                                         |
